(window.webpackJsonp=window.webpackJsonp||[]).push([[54],{595:function(t,_,a){"use strict";a.r(_);var s=a(4),v=Object(s.a)({},(function(){var t=this,_=t.$createElement,a=t._self._c||_;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"_1、模块组合结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、模块组合结构"}},[t._v("#")]),t._v(" 1、模块组合结构")]),t._v(" "),a("p",[t._v("把操作系统看作一个整体，由若干个功能模块按一定的结构方式组成，协同完成整个系统的功能。")]),t._v(" "),a("ul",[a("li",[t._v("优点：结构紧密，接口简单直接，系统效率相对较高。")]),t._v(" "),a("li",[t._v("缺点：不容易把握好各模块的独立性，会导致系统结构不清晰。可扩展性较差，可适应性较差。")])]),t._v(" "),a("h2",{attrs:{id:"_2、层次结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、层次结构"}},[t._v("#")]),t._v(" 2、层次结构")]),t._v(" "),a("p",[t._v("将操作系统的所有功能模块，按调用次序排列成若干层，使得功能模块之间只存在单向调用和单向依赖。")]),t._v(" "),a("ul",[a("li",[t._v("优点：模块间的组织和依赖关系清晰明了，上层功能是建立在下层功能基础之上。系统的可读性，可适应性以及可靠性都得到了增强，便于修改和扩充。")]),t._v(" "),a("li",[t._v("缺点。考虑系统各个功能模块的层次问题较为费时费力。")])]),t._v(" "),a("h2",{attrs:{id:"_3、-微内核结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、-微内核结构"}},[t._v("#")]),t._v(" 3、 微内核结构")]),t._v(" "),a("p",[t._v("在操作系统内核中只留下一些最基本的功能，而将其他服务尽可能的从内核中分离出去，用若干个运行在用户态的进程来实现，形成所谓的“客户/服务器”模式，即  C/S 模式。")]),t._v(" "),a("ul",[a("li",[t._v("优点：各服务进程相互独立，可靠性好。更加灵活，方便增删服务功能。便于维护，适合分布式处理的计算环境。")]),t._v(" "),a("li",[t._v("缺点：所有服务进程都要通过微内核互相通信，效率不高。")])])])}),[],!1,null,null,null);_.default=v.exports}}]);